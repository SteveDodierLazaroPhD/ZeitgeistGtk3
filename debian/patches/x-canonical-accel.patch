Description: Allow setting menu item accelerator text directly
 Add a custom GMenuItem attribute called "x-canonical-accel" that
 allows the accelerator text to be set directly without needing a
 key code and modifier. We need this because sometimes all we have
 is the translated accelerator text, and parsing this is difficult
 considering the user's language may not be English.

Author: William Hua <william.hua@canonical.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1208019

Index: gtk+3.0-3.14.3/gtk/gtkmenutrackeritem.c
===================================================================
--- gtk+3.0-3.14.3.orig/gtk/gtkmenutrackeritem.c
+++ gtk+3.0-3.14.3/gtk/gtkmenutrackeritem.c
@@ -114,6 +114,7 @@ enum {
   PROP_ROLE,
   PROP_TOGGLED,
   PROP_ACCEL,
+  PROP_ACCEL_TEXT,
   PROP_SUBMENU_SHOWN,
   PROP_IS_VISIBLE,
   N_PROPS
@@ -182,6 +183,9 @@ gtk_menu_tracker_item_get_property (GObj
     case PROP_ACCEL:
       g_value_set_string (value, gtk_menu_tracker_item_get_accel (self));
       break;
+    case PROP_ACCEL_TEXT:
+      g_value_set_string (value, gtk_menu_tracker_item_get_accel_text (self));
+      break;
     case PROP_SUBMENU_SHOWN:
       g_value_set_boolean (value, gtk_menu_tracker_item_get_submenu_shown (self));
       break;
@@ -239,6 +243,8 @@ gtk_menu_tracker_item_class_init (GtkMen
     g_param_spec_boolean ("toggled", "", "", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE);
   gtk_menu_tracker_item_pspecs[PROP_ACCEL] =
     g_param_spec_string ("accel", "", "", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE);
+  gtk_menu_tracker_item_pspecs[PROP_ACCEL_TEXT] =
+    g_param_spec_string ("accel-text", "", "", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE);
   gtk_menu_tracker_item_pspecs[PROP_SUBMENU_SHOWN] =
     g_param_spec_boolean ("submenu-shown", "", "", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE);
   gtk_menu_tracker_item_pspecs[PROP_IS_VISIBLE] =
@@ -715,6 +721,16 @@ gtk_menu_tracker_item_get_display_hint (
   return display_hint;
 }
 
+const gchar *
+gtk_menu_tracker_item_get_accel_text (GtkMenuTrackerItem *self)
+{
+  const gchar *accel_text = NULL;
+
+  g_menu_item_get_attribute (self->item, "x-canonical-accel", "&s", &accel_text);
+
+  return accel_text;
+}
+
 GMenuModel *
 _gtk_menu_tracker_item_get_link (GtkMenuTrackerItem *self,
                                  const gchar        *link_name)
Index: gtk+3.0-3.14.3/gtk/gtkmenutrackeritem.h
===================================================================
--- gtk+3.0-3.14.3.orig/gtk/gtkmenutrackeritem.h
+++ gtk+3.0-3.14.3/gtk/gtkmenutrackeritem.h
@@ -73,6 +73,8 @@ gboolean                gtk_menu_tracker
 
 const gchar *           gtk_menu_tracker_item_get_accel                 (GtkMenuTrackerItem *self);
 
+const gchar *           gtk_menu_tracker_item_get_accel_text            (GtkMenuTrackerItem *self);
+
 GMenuModel *           _gtk_menu_tracker_item_get_link                  (GtkMenuTrackerItem *self,
                                                                          const gchar        *link_name);
 
Index: gtk+3.0-3.14.3/gtk/gtkmodelmenuitem.c
===================================================================
--- gtk+3.0-3.14.3.orig/gtk/gtkmodelmenuitem.c
+++ gtk+3.0-3.14.3/gtk/gtkmodelmenuitem.c
@@ -43,7 +43,8 @@ enum
   PROP_ICON,
   PROP_TEXT,
   PROP_TOGGLED,
-  PROP_ACCEL
+  PROP_ACCEL,
+  PROP_ACCEL_TEXT
 };
 
 static void
@@ -425,6 +426,41 @@ gtk_model_menu_item_get_property (GObjec
 }
 
 static void
+gtk_model_menu_item_set_accel_text (GtkModelMenuItem *item,
+                                    const gchar      *accel_text)
+{
+  GtkWidget *child;
+  GList *children;
+
+  child = gtk_bin_get_child (GTK_BIN (item));
+  if (child == NULL)
+    {
+      gtk_menu_item_get_label (GTK_MENU_ITEM (item));
+      child = gtk_bin_get_child (GTK_BIN (item));
+      g_assert (GTK_IS_LABEL (child));
+    }
+
+  if (GTK_IS_LABEL (child))
+    {
+      _gtk_accel_label_set_accel_text (GTK_ACCEL_LABEL (child), accel_text);
+      return;
+    }
+
+  if (!GTK_IS_CONTAINER (child))
+    return;
+
+  children = gtk_container_get_children (GTK_CONTAINER (child));
+
+  while (children)
+    {
+      if (GTK_IS_ACCEL_LABEL (children->data))
+        _gtk_accel_label_set_accel_text (children->data, accel_text);
+
+      children = g_list_delete_link (children, children);
+    }
+}
+
+static void
 gtk_model_menu_item_set_property (GObject      *object,
                                   guint         prop_id,
                                   const GValue *value,
@@ -455,6 +491,10 @@ gtk_model_menu_item_set_property (GObjec
       gtk_model_menu_item_set_accel (item, g_value_get_string (value));
       break;
 
+    case PROP_ACCEL_TEXT:
+      gtk_model_menu_item_set_accel_text (item, g_value_get_string (value));
+      break;
+
     default:
       g_assert_not_reached ();
     }
@@ -497,6 +537,9 @@ gtk_model_menu_item_class_init (GtkModel
   g_object_class_install_property (object_class, PROP_ACCEL,
                                    g_param_spec_string ("accel", "accel", "accel", NULL,
                                                         G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS | G_PARAM_EXPLICIT_NOTIFY));
+  g_object_class_install_property (object_class, PROP_ACCEL_TEXT,
+                                   g_param_spec_string ("accel-text", "accel-text", "accel-text", NULL,
+                                                        G_PARAM_WRITABLE | G_PARAM_STATIC_STRINGS));
 
   gtk_widget_class_set_accessible_role (GTK_WIDGET_CLASS (class), ATK_ROLE_MENU_ITEM);
 }
Index: gtk+3.0-3.14.3/gtk/gtkmenushell.c
===================================================================
--- gtk+3.0-3.14.3.orig/gtk/gtkmenushell.c
+++ gtk+3.0-3.14.3/gtk/gtkmenushell.c
@@ -2196,6 +2196,7 @@ gtk_menu_shell_tracker_insert_func (GtkM
       g_object_bind_property (item, "role", widget, "action-role", G_BINDING_SYNC_CREATE);
       g_object_bind_property (item, "toggled", widget, "toggled", G_BINDING_SYNC_CREATE);
       g_object_bind_property (item, "accel", widget, "accel", G_BINDING_SYNC_CREATE);
+      g_object_bind_property (item, "accel-text", widget, "accel-text", G_BINDING_SYNC_CREATE);
 
       g_signal_connect (widget, "activate", G_CALLBACK (gtk_menu_shell_item_activate), item);
       gtk_widget_show (widget);
Index: gtk+3.0-3.14.3/gtk/gtkaccellabel.c
===================================================================
--- gtk+3.0-3.14.3.orig/gtk/gtkaccellabel.c
+++ gtk+3.0-3.14.3/gtk/gtkaccellabel.c
@@ -109,6 +109,8 @@ struct _GtkAccelLabelPrivate
 
   guint           accel_key;         /* manual accel key specification if != 0 */
   GdkModifierType accel_mods;
+
+  gchar         *accel_text;         /* already-translated accel_string */
 };
 
 GParamSpec *props[LAST_PROP] = { NULL, };
@@ -264,6 +266,7 @@ gtk_accel_label_init (GtkAccelLabel *acc
   priv->accel_closure = NULL;
   priv->accel_group = NULL;
   priv->accel_string = NULL;
+  priv->accel_text = NULL;
 }
 
 /**
@@ -305,6 +308,7 @@ gtk_accel_label_finalize (GObject *objec
   GtkAccelLabel *accel_label = GTK_ACCEL_LABEL (object);
 
   g_free (accel_label->priv->accel_string);
+  g_free (accel_label->priv->accel_text);
 
   G_OBJECT_CLASS (gtk_accel_label_parent_class)->finalize (object);
 }
@@ -899,6 +903,12 @@ gtk_accel_label_refetch (GtkAccelLabel *
       accel_label->priv->accel_string = NULL;
     }
 
+  if (accel_label->priv->accel_text)
+    {
+      accel_label->priv->accel_string = g_strdup (accel_label->priv->accel_text);
+      return FALSE;
+    }
+
   g_object_get (gtk_widget_get_settings (GTK_WIDGET (accel_label)),
                 "gtk-enable-accels", &enable_accels,
                 NULL);
@@ -1007,3 +1017,13 @@ gtk_accel_label_get_accel (GtkAccelLabel
   *accelerator_key = accel_label->priv->accel_key;
   *accelerator_mods = accel_label->priv->accel_mods;
 }
+
+void
+_gtk_accel_label_set_accel_text (GtkAccelLabel *accel_label,
+                                 const gchar   *accel_text)
+{
+  g_free (accel_label->priv->accel_text);
+  accel_label->priv->accel_text = g_strdup (accel_text);
+
+  gtk_accel_label_reset (accel_label);
+}
