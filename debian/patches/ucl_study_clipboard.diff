Index: gtk+3.0-3.14.13/gtk/Makefile.am
===================================================================
--- gtk+3.0-3.14.13.orig/gtk/Makefile.am
+++ gtk+3.0-3.14.13/gtk/Makefile.am
@@ -678,6 +678,7 @@ gtk_private_h_sources =		\
 	gtkwin32themeprivate.h	\
 	gtkwindowprivate.h	\
 	gtktreemenu.h		\
+	zgtrackutils.h		\
 	$(gtk_private_type_h_sources) \
 	$(gtk_clipboard_dnd_h_sources)
 
@@ -1094,6 +1095,7 @@ gtk_base_c_sources = 		\
 	gtkwindow.c		\
 	gtkwindowgroup.c	\
 	gtkwin32theme.c		\
+	zgtrackutils.c		\
 	$(gtk_clipboard_dnd_c_sources)
 
 nodist_gtk_c_sources =
Index: gtk+3.0-3.14.13/gtk/gtkclipboard.c
===================================================================
--- gtk+3.0-3.14.13.orig/gtk/gtkclipboard.c
+++ gtk+3.0-3.14.13/gtk/gtkclipboard.c
@@ -29,6 +29,9 @@
 #include "gtktextbufferrichtext.h"
 #include "gtkintl.h"
 
+#include <zeitgeist.h>
+#include "zgtrackutils.h"
+
 #ifdef GDK_WINDOWING_X11
 #include "x11/gdkx.h"
 #endif
@@ -570,7 +573,133 @@ clipboard_remove_owner_notify (GtkClipbo
 					      clipboard),
 			      clipboard_owner_destroyed);
 }
-	  
+
+static void
+_log_zeitgeist_event_copy (GtkClipboard         *clipboard,
+                           const GtkTargetEntry *targets,
+                           guint                 n_targets)
+{
+  // Test for Clipboard and presence of content
+  g_return_if_fail (GTK_IS_CLIPBOARD (clipboard));
+  g_return_if_fail (targets != NULL || n_targets == 0);
+
+  // Ignore PRIMARY
+  if (clipboard->selection != GDK_SELECTION_CLIPBOARD)
+    return;
+
+  // Get access to Zeitgeist logger daemon
+  ZeitgeistLog *log = zeitgeist_log_get_default ();
+
+  // Create the event to be added, with the known information
+  gchar *actor_name = _get_actor_name_from_pid (getpid());
+  ZeitgeistEvent *event = zeitgeist_event_new_full (
+              ZG_INTERPRETATION_CLIPBOARD_COPY,
+              ZEITGEIST_ZG_USER_ACTIVITY,
+              actor_name,
+              NULL);
+  g_free (actor_name);
+
+  // Loop through targets
+  int i = 0;
+  for (; i<n_targets; ++i)
+  {
+    //TODO call clipboard->get_func (clipboard, selection_data, info, clipboard->user_data); and loop from callback to callback to calculate lengths...
+    /*gchar       *len_str               = NULL;
+    if (!g_strcmp0 (targets[i].target, "UTF8_STRING") || !g_strcmp0 (targets[i].target, "text/plain;charset=utf-8")) {
+      len_str = g_strdup_printf ("len:%s", g_utf8_strlen (TODO, -1));
+    } else if (!g_strcmp0 (targets[i].target, "TEXT") || !g_strcmp0 (targets[i].target, "COMPOUND_TEXT") || !g_strcmp0 (targets[i].target, "text/plain")) {
+      len_str = g_strdup_printf ("len:%s", strlen (TODO));
+    } else {
+      len_str = g_strdup ("len:n/a");
+    }*/
+    gchar       *uri                   = g_strdup_printf ("clipboard://%s/%s", targets[i].target, /*len_str*/ "len:n/a");
+    gchar       *mime_type             = g_strdup (targets[i].target);
+    gchar       *display_name          = "Clipboard content";
+
+    // Add the subject now that all information has been calculated
+    zeitgeist_event_add_subject (event, zeitgeist_subject_new_full(uri,
+                                      ZG_INTERPRETATION_DATA_CLIPBOARD,
+                                      ZEITGEIST_NFO_SOFTWARE_SERVICE,
+                                      mime_type,
+                                      NULL,
+                                      display_name,
+                                      NULL));
+
+    g_free (mime_type);
+    /*g_free (len_str);*/
+    g_free (uri);
+  }
+
+  // Add the UCL metadata
+  char *study_uri = g_strdup_printf ("activity://null///pid://%d///winid://n/a///", getpid());
+  zeitgeist_event_add_subject (event, zeitgeist_subject_new_full (study_uri,
+                                          ZEITGEIST_NFO_SOFTWARE,
+                                          ZEITGEIST_ZG_WORLD_ACTIVITY,
+                                          "application/octet-stream",
+                                          NULL,
+                                          "ucl-study-metadata",
+                                          NULL));
+  g_free (study_uri);
+
+  zeitgeist_log_insert_events_no_reply (log, event, NULL);
+}
+
+static void
+_log_zeitgeist_event_paste (GtkClipboard           *clipboard,
+                            const GtkSelectionData *data)
+{
+  // Test for Clipboard and presence of content
+  g_return_if_fail (data != NULL);
+
+  // Ignore PRIMARY
+  if (clipboard->selection != GDK_SELECTION_CLIPBOARD)
+    return;
+
+  GdkAtom   data_type   = gtk_selection_data_get_data_type (data);
+  gint      len         = gtk_selection_data_get_length (data);
+
+  // Get access to Zeitgeist logger daemon
+  ZeitgeistLog *log = zeitgeist_log_get_default ();
+
+  // Create the event to be added, with the known information
+  gchar *actor_name = _get_actor_name_from_pid (getpid());
+  ZeitgeistEvent *event = zeitgeist_event_new_full (
+              ZG_INTERPRETATION_CLIPBOARD_PASTE,
+              ZEITGEIST_ZG_USER_ACTIVITY,
+              actor_name,
+              NULL);
+  g_free (actor_name);
+
+  // Len is used to distinguish empty pastes, which might be needed by the ML algorithm later
+  gchar       *mime_type             = gdk_atom_name (data_type);
+  gchar       *uri                   = g_strdup_printf ("clipboard://%s/len:%d", mime_type, len);
+  gchar       *display_name          = "Clipboard content";
+
+  // Add the subject now that all information has been calculated
+  zeitgeist_event_add_subject (event, zeitgeist_subject_new_full(uri,
+                                   ZG_INTERPRETATION_DATA_CLIPBOARD,
+                                   ZEITGEIST_NFO_SOFTWARE_SERVICE,
+                                   mime_type,
+                                   NULL,
+                                   display_name,
+                                   NULL));
+  g_free (mime_type);
+  g_free (uri);
+
+  // Add the UCL metadata
+  char *study_uri = g_strdup_printf ("activity://null///pid://%d///winid://n/a///", getpid());
+  zeitgeist_event_add_subject (event, zeitgeist_subject_new_full (study_uri,
+                                        ZEITGEIST_NFO_SOFTWARE,
+                                        ZEITGEIST_ZG_WORLD_ACTIVITY,
+                                        "application/octet-stream",
+                                        NULL,
+                                        "ucl-study-metadata",
+                                        NULL));
+  g_free (study_uri);
+
+  zeitgeist_log_insert_events_no_reply (log, event, NULL);
+}
+
 static gboolean
 gtk_clipboard_set_contents (GtkClipboard         *clipboard,
 			    const GtkTargetEntry *targets,
@@ -607,6 +736,9 @@ gtk_clipboard_set_contents (GtkClipboard
 	      clipboard_add_owner_notify (clipboard);
  	}
 
+  // We're already tracking this across all of X via GPaste but here we can get the content type/len
+  _log_zeitgeist_event_copy (clipboard, targets, n_targets);
+
       clipboard->get_func = get_func;
       clipboard->clear_func = clear_func;
 
@@ -1038,6 +1170,8 @@ request_text_received_func (GtkClipboard
 	}
     }
 
+  _log_zeitgeist_event_paste (clipboard, selection_data);
+
   info->callback (clipboard, result, info->user_data);
   g_free (info);
   g_free (result);
@@ -1100,6 +1234,8 @@ request_rich_text_received_func (GtkClip
       return;
     }
 
+  _log_zeitgeist_event_paste (clipboard, selection_data);
+
   info->callback (clipboard, gtk_selection_data_get_target (selection_data),
                   result, length,
                   info->user_data);
@@ -1194,6 +1330,8 @@ request_image_received_func (GtkClipboar
 	}
     }
 
+  _log_zeitgeist_event_paste (clipboard, selection_data);
+
   info->callback (clipboard, result, info->user_data);
   g_free (info);
 
@@ -1248,6 +1386,8 @@ request_uris_received_func (GtkClipboard
   RequestURIInfo *info = data;
   gchar **uris;
 
+  _log_zeitgeist_event_paste (clipboard, selection_data);
+
   uris = gtk_selection_data_get_uris (selection_data);
   info->callback (clipboard, uris, info->user_data);
   g_strfreev (uris);
@@ -1302,6 +1442,8 @@ request_targets_received_func (GtkClipbo
 
   gtk_selection_data_get_targets (selection_data, &targets, &n_targets);
 
+  _log_zeitgeist_event_paste (clipboard, selection_data);
+
   info->callback (clipboard, targets, n_targets, info->user_data);
 
   g_free (info);
Index: gtk+3.0-3.14.13/gtk/gtkclipboard.h
===================================================================
--- gtk+3.0-3.14.13.orig/gtk/gtkclipboard.h
+++ gtk+3.0-3.14.13/gtk/gtkclipboard.h
@@ -26,6 +26,10 @@
 
 #include <gtk/gtkselection.h>
 
+#define ZG_INTERPRETATION_CLIPBOARD_COPY     "activity://gui-toolkit/gtk3/Clipboard/Copy"
+#define ZG_INTERPRETATION_CLIPBOARD_PASTE    "activity://gui-toolkit/gtk3/Clipboard/Paste"
+#define ZG_INTERPRETATION_DATA_CLIPBOARD     "activity://gui-toolkit/gtk3/Clipboard/ContentType"
+
 G_BEGIN_DECLS
 
 #define GTK_TYPE_CLIPBOARD            (gtk_clipboard_get_type ())
Index: gtk+3.0-3.14.13/gtk/gtkentry.c
===================================================================
--- gtk+3.0-3.14.13.orig/gtk/gtkentry.c
+++ gtk+3.0-3.14.13/gtk/gtkentry.c
@@ -34,6 +34,7 @@
 #include "gtkbindings.h"
 #include "gtkcelleditable.h"
 #include "gtkclipboard.h"
+#include "gtkclipboardprivate.h"
 #include "gtkdebug.h"
 #include "gtkdnd.h"
 #include "gtkentry.h"
@@ -70,6 +71,10 @@
 
 #include "a11y/gtkentryaccessible.h"
 
+#include <zeitgeist.h>
+#include <glib/gprintf.h>
+#include "zgtrackutils.h"
+
 /**
  * SECTION:gtkentry
  * @Short_description: A single line text entry field
@@ -7261,6 +7266,58 @@ truncate_multiline (const gchar *text)
 }
 
 static void
+_log_zeitgeist_event_paste (GtkClipboard *clipboard,
+                            GtkEntry     *entry,
+                            const gchar  *text)
+{
+  // Ignore PRIMARY (but try to process when there is no selection, e.g. the selection's owner died)
+  if (clipboard->have_selection && clipboard->selection != GDK_SELECTION_CLIPBOARD)
+    return;
+
+  // Get access to Zeitgeist logger daemon
+  ZeitgeistLog *log = zeitgeist_log_get_default ();
+
+  // Create the event to be added, with the known information
+  gchar *actor_name = _get_actor_name_from_pid (getpid());
+  ZeitgeistEvent *event = zeitgeist_event_new_full (
+              ZG_INTERPRETATION_CLIPBOARD_PASTE,
+              ZEITGEIST_ZG_USER_ACTIVITY,
+              actor_name,
+              NULL);
+  g_free (actor_name);
+
+  // Len is used to distinguish empty pastes, which might be needed by the ML algorithm later
+  gint         len                   = text? strlen (text) : -1;
+  gchar       *uri                   = g_strdup_printf ("clipboard://%s/len:%d", "UTF8_STRING", len);
+  gchar       *display_name          = "Clipboard content";
+
+  // Add the subject now that all information has been calculated
+  zeitgeist_event_add_subject (event, zeitgeist_subject_new_full(uri,
+                                   ZG_INTERPRETATION_DATA_CLIPBOARD,
+                                   ZEITGEIST_NFO_SOFTWARE_SERVICE,
+                                   "UTF8_STRING",
+                                   NULL,
+                                   display_name,
+                                   NULL));
+  g_free (uri);
+
+  // Add the UCL metadata
+  char *window_id = _get_window_id_from_widget (GTK_WIDGET (entry));
+  char *study_uri = g_strdup_printf ("activity://null///pid://%d///winid://%s///", getpid(), window_id);
+  zeitgeist_event_add_subject (event, zeitgeist_subject_new_full (study_uri,
+                                        ZEITGEIST_NFO_SOFTWARE,
+                                        ZEITGEIST_ZG_WORLD_ACTIVITY,
+                                        "application/octet-stream",
+                                        NULL,
+                                        "ucl-study-metadata",
+                                        NULL));
+  g_free (study_uri);
+  g_free (window_id);
+
+  zeitgeist_log_insert_events_no_reply (log, event, NULL);
+}
+
+static void
 paste_received (GtkClipboard *clipboard,
 		const gchar  *text,
 		gpointer      data)
@@ -7270,6 +7327,8 @@ paste_received (GtkClipboard *clipboard,
   GtkEntryPrivate *priv = entry->priv;
   guint button;
 
+  _log_zeitgeist_event_paste (clipboard, entry, text);
+
   button = gtk_gesture_single_get_current_button (GTK_GESTURE_SINGLE (priv->multipress_gesture));
 
   if (button == GDK_BUTTON_MIDDLE)
@@ -7280,7 +7339,7 @@ paste_received (GtkClipboard *clipboard,
       if (!((start <= pos && pos <= end) || (end <= pos && pos <= start)))
 	gtk_editable_select_region (editable, pos, pos);
     }
-      
+
   if (text)
     {
       gint pos, start, end;
Index: gtk+3.0-3.14.13/gtk/gtktextview.c
===================================================================
--- gtk+3.0-3.14.13.orig/gtk/gtktextview.c
+++ gtk+3.0-3.14.13/gtk/gtktextview.c
@@ -58,6 +58,10 @@
 #include "gtkpixelcacheprivate.h"
 #include "gtkmagnifierprivate.h"
 
+#include <zeitgeist.h>
+#include "gtkclipboardprivate.h"
+#include "zgtrackutils.h"
+
 #include "a11y/gtktextviewaccessibleprivate.h"
 
 /**
@@ -6555,11 +6559,63 @@ gtk_text_view_copy_clipboard (GtkTextVie
 }
 
 static void
+_log_zeitgeist_event_paste (GtkClipboard *clipboard,
+                            GtkTextView *view)
+{
+  // Ignore PRIMARY (but try to process when there is no selection, e.g. the selection's owner died)
+  if (clipboard->have_selection && clipboard->selection != GDK_SELECTION_CLIPBOARD)
+    return;
+
+  // Get access to Zeitgeist logger daemon
+  ZeitgeistLog *log = zeitgeist_log_get_default ();
+
+  // Create the event to be added, with the known information
+  gchar *actor_name = _get_actor_name_from_pid (getpid());
+  ZeitgeistEvent *event = zeitgeist_event_new_full (
+              ZG_INTERPRETATION_CLIPBOARD_PASTE,
+              ZEITGEIST_ZG_USER_ACTIVITY,
+              actor_name,
+              NULL);
+  g_free (actor_name);
+
+  //TODO make private function in buffer that returns the copied length to the callback
+  gchar       *uri                   = g_strdup_printf ("clipboard://%s/len:n/a", "UTF8_STRING");
+  gchar       *display_name          = "Clipboard content";
+
+  // Add the subject now that all information has been calculated
+  zeitgeist_event_add_subject (event, zeitgeist_subject_new_full(uri,
+                                   ZG_INTERPRETATION_DATA_CLIPBOARD,
+                                   ZEITGEIST_NFO_SOFTWARE_SERVICE,
+                                   "UTF8_STRING",
+                                   NULL,
+                                   display_name,
+                                   NULL));
+  g_free (uri);
+
+  // Add the UCL metadata
+  char *window_id = _get_window_id_from_widget (GTK_WIDGET (view));
+  char *study_uri = g_strdup_printf ("activity://null///pid://%d///winid://%s///", getpid(), window_id);
+  zeitgeist_event_add_subject (event, zeitgeist_subject_new_full (study_uri,
+                                        ZEITGEIST_NFO_SOFTWARE,
+                                        ZEITGEIST_ZG_WORLD_ACTIVITY,
+                                        "application/octet-stream",
+                                        NULL,
+                                        "ucl-study-metadata",
+                                        NULL));
+  g_free (study_uri);
+  g_free (window_id);
+
+  zeitgeist_log_insert_events_no_reply (log, event, NULL);
+}
+
+static void
 gtk_text_view_paste_clipboard (GtkTextView *text_view)
 {
   GtkClipboard *clipboard = gtk_widget_get_clipboard (GTK_WIDGET (text_view),
 						      GDK_SELECTION_CLIPBOARD);
-  
+
+  _log_zeitgeist_event_paste (clipboard, text_view);
+
   gtk_text_buffer_paste_clipboard (get_buffer (text_view),
 				   clipboard,
 				   NULL,
Index: gtk+3.0-3.14.13/gtk/zgtrackutils.c
===================================================================
--- /dev/null
+++ gtk+3.0-3.14.13/gtk/zgtrackutils.c
@@ -0,0 +1,179 @@
+/* Activity Finder
+ * zgtrackutils.c: Utilities for Zeitgeist event logging
+ * Copyright (C) 2013-2016, Steve Dodier-Lazaro, UCL.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 3 of
+ *  the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "gtkwidget.h"
+#include "zgtrackutils.h"
+#include <glib.h>
+#include <glib/gprintf.h>
+#include <gdk/gdk.h>
+#ifdef GDK_WINDOWING_X11
+#include <gdk/gdkx.h>
+#endif
+
+/**
+ * SECTION:zgtrackutils
+ * @Short_description: Utilities for logging events into the Zeitgeist daemon
+ * @Title: ZGTrackUtils
+ * @See_also: #GtkFileChooser
+ *
+ * #ZGTrackUtils is a set of utility functions used across parts of
+ * the GTK+ framework that were modified to send events to the Zeitgeist
+ * daemon. These utilities are not responsible for sending events as this
+ * will ultimately be the responsibility of separately-run widgets that
+ * interact with GTK+ applications through IPC, but they provide a common
+ * codebase between modified classes to determine event actors, MIME types,
+ * etc.
+ *
+ * <note>
+ * The code in this section should never be directly called by GTK+ functions.
+ * </note>
+ *
+ */
+
+/**
+ * _get_actor_name_from_pid:
+ * @pid: a process id, 0 or -1 to use self id.
+ *
+ * Returns a Zeitgeist Actor string for the process indicated by the pid
+ * parameter or for the calling process. The string is generated by retrieving
+ * the executable name, prefixing it by 'app://' and suffexing it by
+ * '.desktop'. The idea behind this is that there is no current consensus on
+ * how to name an application in FreeDesktop.org and that Zeitgeist does not
+ * actually make much use of the Actor string.
+ *
+ * Return value: (type URI): The process' corresponding Actor URI, or %NULL
+ *  if an error occurred. Free with g_free().
+ *
+ * Copyright: Steve Dodier-Lazaro, 2015, UCL
+ *            <s.dodier-lazaro@cs.ucl.ac.uk>
+ *            Licensed under GPLv3
+ *
+ * Since: 3.10.6
+ **/
+gchar *
+_get_actor_name_from_pid (pid_t pid)
+{
+    char         *link_file     = NULL;
+    char         *link_target   = NULL;
+    char        **split_target  = NULL;
+    char         *actor_name    = NULL;
+    ssize_t       read_len      = PATH_MAX; // 4096, so it's unlikely link_len ever overflows :)
+    ssize_t       link_len      = 1;
+
+    if (pid <= 0)
+    {
+        return NULL;
+    }
+
+    link_file = g_strdup_printf ("/proc/%d/exe", pid);
+    if (link_file == NULL)
+    {
+        return NULL;
+    }
+
+    // It is impossible to obtain the size of /proc link targets as /proc is
+    // not POSIX compliant. Hence, we start from the NAME_MAX limit and increase
+    // it all the way up to readlink failing. readlink will fail upon reaching
+    // the PATH_MAX limit on Linux implementations. read_len will be strictly
+    // inferior to link_len as soon as the latter is big enough to contain the
+    // path to the executable and a trailing null character.
+    while (read_len >= link_len)
+    {
+        link_len += NAME_MAX;
+
+        g_free(link_target);
+        link_target = g_malloc(link_len * sizeof (char));
+
+        if (link_target == NULL)
+        {
+            g_free (link_file);
+            g_free (link_target);
+            return NULL;
+        }
+
+        read_len= readlink (link_file, link_target, link_len);
+
+        if (read_len < 0)
+        {
+            g_free (link_file);
+            g_free (link_target);
+            return NULL;
+        }
+    }
+
+    g_free (link_file);
+
+    // readlink does not null-terminate the string
+    link_target[read_len] = '\0';
+
+    split_target = g_strsplit (link_target, "/", -1);
+    g_free (link_target);
+
+    if(split_target == NULL)
+    {
+        return NULL;
+    }
+
+    // Iterate to the last element which is the executable name
+    for (read_len = 0; split_target[read_len]; read_len++);
+
+    // Turn it into an arbitrary actor name
+    actor_name = g_strdup_printf ("application://%s.desktop", split_target[--read_len]);
+    g_strfreev (split_target);
+
+    // Better safe than sorry
+    if (!actor_name)
+      actor_name = g_strdup ("application://unknown.desktop");
+
+    return actor_name;
+}
+
+/**
+ * _get_window_id_from_widget:
+ * @widget: a #GtkWidget.
+ *
+ * Returns a string representation of the X11 window id of the window that
+ * contains the given widget, or the string "n/a" if one could not be found.
+ *
+ * Return value: (type URI): The window id as a string, or "n/a".
+ * Free with g_free().
+ *
+ * Copyright: Steve Dodier-Lazaro, 2015, UCL
+ *            <s.dodier-lazaro@cs.ucl.ac.uk>
+ *            Licensed under GPLv3
+ *
+ * Since: 3.10.6
+ **/
+char *
+_get_window_id_from_widget (GtkWidget *widget)
+{
+  char *window_id = NULL;
+  #ifdef GDK_WINDOWING_X11
+  GdkWindow *gwin = gtk_widget_get_window (GTK_WIDGET (widget));
+
+  if (gwin) {
+    GdkDisplay *dsp = gdk_window_get_display (gwin);
+    if (dsp && GDK_IS_X11_DISPLAY (dsp))
+      window_id = g_strdup_printf ("%lu", gdk_x11_window_get_xid (gwin));
+  }
+
+  if (!window_id)
+  #endif
+    window_id = g_strdup ("n/a");
+  return window_id;
+}
Index: gtk+3.0-3.14.13/gtk/zgtrackutils.h
===================================================================
--- /dev/null
+++ gtk+3.0-3.14.13/gtk/zgtrackutils.h
@@ -0,0 +1,33 @@
+/* Activity Finder
+ * zgtrackutils.c: Utilities for Zeitgeist event logging
+ * Copyright (C) 2013-2016, Steve Dodier-Lazaro, UCL.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 3 of
+ *  the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef __ZG_TRACK_UTILS_H__
+#define __ZG_TRACK_UTILS_H__
+
+#include <glib.h>
+#include <unistd.h>
+#include <zeitgeist.h>
+
+gchar *
+_get_actor_name_from_pid (pid_t pid);
+
+gchar *
+_get_window_id_from_widget (GtkWidget *widget);
+
+#endif /* __ZG_TRACK_UTILS_H__ */
+
